<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
            http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.1.xsd
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">

    <!-- do initialize -->
    <bean id="doInit" class="com.rovger.Initializer" init-method="init"></bean>

    <!--  Allow proxys -->
    <aop:aspectj-autoproxy />
    <bean id="sleep" class="com.rovger.aop.Human"></bean>
    <bean id="sleepHelper" class="com.rovger.aop.SleepHelper"></bean>

    <!-- 导入mongodb配置文件 -->
    <import resource="mongodb-context.xml"></import>
    <bean id="userDao" class="com.rovger.dao.UserDAO"></bean>

    <!-- 在xml配置了这个标签后，spring可以自动去扫描base-package下面或者子包下面的java文件， 如果扫描到有@Component @Controller@Service等这些注解的类，则把这些类注册为bean -->
    <context:component-scan base-package="com.rovger.controller">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- task package -->
    <context:component-scan base-package="com.rovger.task"/>

    <task:annotation-driven scheduler="springTask"/>
    <bean id="springTask" class="org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler">
        <property name="poolSize" value="3"/>
        <property name="rejectedExecutionHandler">
            <bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy"/>
        </property>
    </bean>

    <!-- 线程池配置 -->
    <bean id="threadPoolTaskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <!--核心线程数，会一直存活，即使没有任务，当线程数小于核心线程数时，即使是空闲线程也会优先创建新线程处理。
            设置allowCoreThreadTimeout=true（默认false）时，核心线程会超时关闭。默认为1-->
        <property name="corePoolSize" value="10"/>
        <!--最大线程数，当线程数>=核心线程数时，且任务队列已满时，线程池会创建新的线程来处理任务。默认为Integer.MAX_VALUE-->
        <property name="maxPoolSize" value="50"/>
        <!--任务队列容量，当核心线程数达到最大时，新任务会在队列中排队等待执行-->
        <property name="queueCapacity" value="1000"/>
        <!--线程空闲时间，当线程空闲时间达到keepAliveSeconds时，线程会退出直到线程数==核心线程数，默认60s-->
        <property name="keepAliveSeconds" value="120"/>
        <!--任务拒绝处理器，
            1.当线程数达到maxPoolSize时，且任务队列已满，会拒绝新任务；
            2.当线程池被调用shutdown()后，会等待线程池里的任务执行完毕再shutdown，如果在调用shutdown()和线程池正真shutdown之间提交任务，会拒绝任务。
            线程池会调用rejectedExecutionHandler来处理这个任务。如果没有设置默认是AbortPolicy，会抛出异常
            ThreadPoolExecutor类有几个内部实现类来处理这类情况：
            AbortPolicy 丢弃任务，抛运行时异常
            CallerRunsPolicy 执行任务
            DiscardPolicy 忽视，什么都不会发生
            DiscardOldestPolicy 从队列中踢出最先进入队列（最后一个执行）的任务
            实现RejectedExecutionHandler接口，可自定义处理器-->
        <property name="rejectedExecutionHandler">
            <bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy"></bean>
        </property>
    </bean>

</beans>